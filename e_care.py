# -*- coding: utf-8 -*-
"""E-care.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qqjakaGMAgidtpZEy_Anj_322IR1G7zg
"""

!pip install gradio
import gradio as gr

from google.colab import drive

drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Set up the image generators
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory('/content/drive/MyDrive/train', target_size=(224, 224), batch_size=32, class_mode='binary')

test_generator = test_datagen.flow_from_directory('/content/drive/MyDrive/test', target_size=(224, 224), batch_size=32, class_mode='binary')

# Define the CNN architecture
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer=Adam(lr=1e-4), loss='binary_crossentropy', metrics=['accuracy'])
# Train the model
history = model.fit(train_generator, steps_per_epoch=len(train_generator), epochs=10, validation_data=test_generator, validation_steps=len(test_generator))

# Save the trained model
model.save('trained_model')

from keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from keras.applications.vgg16 import VGG16
import numpy as np
from tensorflow.keras.preprocessing import image


import gradio as gr


def predict_image(img):
    # Load image and resize to (224, 224)
    #img = img.resize((224, 224))

    # Convert image to numpy array and preprocess for ResNet50
    img = img_to_array(img)
    img = img.astype('float32') / 255.0
    x = np.expand_dims(img, axis=0)

    # Make prediction and return label
    label = model.predict(x)
    print("Predicted Class (0 - Normal , 1- Pneumonia): ", label[0][0])
    if label[0][0]>=0 and label[0][0]<=0.5:
        return "Normal"
    else:
        return "Pneumonia"

image = gr.inputs.Image(shape=(224, 224))
label1 = gr.outputs.Label(num_top_classes=2)

gr.Interface(fn=predict_image, inputs=image, outputs=label1, interpretation='default').launch(debug='False')

